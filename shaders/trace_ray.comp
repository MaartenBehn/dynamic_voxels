#version 450 core

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#include "binding.glsl"
#include "ray.glsl"
#include "cgs.glsl"
#include "dda.glsl"

#define MAX_RAY_STEPS 50
#define EPSILON 0.0001
#define TO_1D(pos, size) ((pos.z * size * size) + (pos.y * size) + pos.x)

#define VOXEL_SIZE 10.0

vec3 to_voxel_pos(vec3 pos){
    return floor(pos * VOXEL_SIZE);
}

void main () {
    Ray ray = init_ray(POS, DIR, gl_GlobalInvocationID.xy, RES);

    vec4 color = vec4(ray.dir * 1.0, 1);

    float time = TIME;

    float t_min, t_max;
    ray_hits_cgs_tree(ray, t_min, t_max);

    if (t_max > 0 && t_max > t_min) {

        vec3 start_pos = to_voxel_pos(get_ray_pos(ray, t_min + (1.0 / VOXEL_SIZE) * 2.0));

        DDA dda = init_DDA(ray, start_pos, ivec3(1000));

        float t_start = distance(ray.pos, start_pos / VOXEL_SIZE);
        float t;
        int i = 0;
        while (i < 10) {
            i++;

            dda = step_DDA(dda);
            t = distance(ray.pos, dda.pos / VOXEL_SIZE);
            if (t < t_max) {
                color = vec4(get_debug_color_gradient_from_float(t / 10.0), 1.0);
                break;
            }
        }


    }

    imageStore(img, ivec2(gl_GlobalInvocationID.xy), color);
}
