#version 450 core

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;


#include "binding.glsl"
#include "ray.glsl"
#include "cgs.glsl"
#include "dda.glsl"

#define RENDER_TEST_OBJECT false
#define RENDER_NEXT_T true
#define RENDER_NEXT_T_AT 2
#define RENDER_DDA_STEPS false

#define USE_DDA_SKIPPING true
#define MAX_SKIP_STEPS 500

#define MAX_RAY_STEPS 50
#define MAX_FULL_DDA_STEPS 500
#define MAX_DEPTH 300
#define EPSILON 0.0001
#define TO_1D(pos, size) ((pos.z * size * size) + (pos.y * size) + pos.x)

void main () {
    PROFILE("main");

    Ray ray = init_ray(POS, DIR, gl_GlobalInvocationID.xy, RES);

    vec4 color = vec4(ray.dir * 1.0, 1);

    float time = TIME;

    if (RENDER_TEST_OBJECT) {
        CGSObject obj = get_test_sphere(time, vec3(0,0,0));
        Interval interval;
        if (ray_hits_cgs_object(ray, obj, CGS_CHILD_TYPE_SPHERE, interval)) {
            float t_min = interval.t_min;
            color = vec4(get_debug_color_gradient_from_float(t_min / 10.0), 1.0);
        }

        imageStore(img, ivec2(gl_GlobalInvocationID.xy), color);
        return;
    }

    AABB aabb = get_aabb(0);
    Interval interval;
    if (ray_aabb_intersect(ray, aabb.min, aabb.max, interval)) {

        float t_start = max(interval.t_min, 0.0) + EPSILON;
        vec3 start_pos = get_ray_pos(ray, t_start);
        DDA dda = init_DDA(ray, start_pos, aabb.min, aabb.max);

        uint dda_step_counter = 0;
        while (dda_step_counter < MAX_FULL_DDA_STEPS) {
            dda_step_counter += 1;

            float current_t = distance(dda.pos, ray.pos);
            //float current_t = get_DDA_t(dda) + t_start;
            float next_t = interval.t_max;
            bool exits = cgs_tree_at_pos(ray, floor(dda.pos), current_t, next_t);

            if (RENDER_NEXT_T && RENDER_NEXT_T_AT == dda_step_counter) {
                color = vec4(get_debug_color_gradient_from_float(float(next_t) / MAX_DEPTH), 1.0);
                break;
            }

            if (exits) {
                color = vec4(get_debug_color_gradient_from_float(current_t / MAX_DEPTH), 1.0);
                break;
            }

            if (USE_DDA_SKIPPING) {
                uint steps = clamp(uint((next_t - current_t)), 1, MAX_SKIP_STEPS);
                dda = step_DDA(dda, steps);
            } else {
                dda = step_DDA(dda, 1);
            }

            if (dda.out_of_bounds) {
                break;
            }
        }

        if (RENDER_DDA_STEPS) {
            color = vec4(get_debug_color_gradient_from_float(float(dda_step_counter) / MAX_FULL_DDA_STEPS), 1.0);
        }
    }

    imageStore(img, ivec2(gl_GlobalInvocationID.xy), color);
}



