#version 450 core

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#include "binding.glsl"
#include "ray.glsl"
#include "cgs.glsl"
#include "dda.glsl"

#define RENDER_CGS false

#define MAX_RAY_STEPS 50
#define EPSILON 0.0001
#define TO_1D(pos, size) ((pos.z * size * size) + (pos.y * size) + pos.x)


#define VOXEL_SIZE 10.0

void main () {
    Ray ray = init_ray(POS, DIR, gl_GlobalInvocationID.xy, RES);

    vec4 color = vec4(ray.dir * 1.0, 1);

    float time = TIME;


    float t_min, t_max;
    ray_hits_cgs_tree(ray, t_min, t_max);


    if (t_max > 0 && t_max > t_min) {
        if (RENDER_CGS) {
            color = vec4(get_debug_color_gradient_from_float(t_min / 10.0), 1.0);
        }

        vec3 start_pos = get_ray_pos(ray, t_min) * VOXEL_SIZE;
        DDA dda = init_DDA(ray, start_pos, ivec3(100000));

        for (uint i = 0; i < 30; i++) {
            dda = step_DDA(dda);

            bool exits = cgs_tree_at_pos(floor(dda.pos) / VOXEL_SIZE);

            if (exits) {

                float dist = get_DDA_t(dda) / VOXEL_SIZE;
                color = vec4(get_debug_color_gradient_from_float(dist / 10.0), 1.0);
                break;
            }
        }

    }

    imageStore(img, ivec2(gl_GlobalInvocationID.xy), color);
}
