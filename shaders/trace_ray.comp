#version 450 core

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#include "binding.glsl"
#include "ray.glsl"
#include "cgs.glsl"
#include "dda.glsl"

#define RENDER_TEST_OBJECT false

#define RENDER_INTERVALS false
#define RENDER_INTERVALS_LAYER 1

#define USE_INTERVAL_LIST false
#define USE_AABB_BASED_SCALE true
#define USE_DDA_INCREASE false

#define RENDER_DDA_STEPS false
#define RENDER_DISTANCE false

#define MAX_DDA_STEPS 500
#define MAX_DEPTH 300
#define EPSILON 0.0001
#define TO_1D(pos, size) ((pos.z * size * size) + (pos.y * size) + pos.x)

void main () {
    PROFILE("main");

    Ray ray = init_ray(POS, DIR, gl_GlobalInvocationID.xy, RES);

    vec4 color = vec4(ray.dir * 1.0, 1);

    float time = TIME;

    if (RENDER_TEST_OBJECT) {
        CGSObject obj = get_test_sphere(time, vec3(0,0,0));
        Interval interval;
        if (ray_hits_cgs_object(ray, obj, CGS_CHILD_TYPE_SPHERE, interval)) {
            float t_min = interval.t_min;
            color = vec4(get_debug_color_gradient_from_float(t_min / 10.0), 1.0);
        }

        imageStore(img, ivec2(gl_GlobalInvocationID.xy), color);
        return;
    }

    if (RENDER_INTERVALS && USE_INTERVAL_LIST) {
        IntervalList list;
        cgs_tree_interval_list(ray, list);

        if (list.len > RENDER_INTERVALS_LAYER) {
            color = vec4(get_debug_color_gradient_from_float(list.intervals[RENDER_INTERVALS_LAYER].t_min / MAX_DEPTH), 1.0);
        }

        imageStore(img, ivec2(gl_GlobalInvocationID.xy), color);
        return;
    }

    if (RENDER_INTERVALS && !USE_INTERVAL_LIST) {

        float current_t = 0;
        Interval interval;
        AABB aabb;
        for (uint i = 0; i <= RENDER_INTERVALS_LAYER; i++) {
            if (cgs_tree_next_interval(ray, current_t, interval, aabb)) {
                current_t = interval.t_max + EPSILON;
            } else {
                interval.t_min = 0;
                break;
            }
        }

        color = vec4(get_debug_color_gradient_from_float(interval.t_min / MAX_DEPTH), 1.0);

        imageStore(img, ivec2(gl_GlobalInvocationID.xy), color);
        return;
    }

    if (USE_INTERVAL_LIST) {
        IntervalList list;
        cgs_tree_interval_list(ray, list);

        uint interval_counter = 0;
        uint dda_step_counter = 0;
        uint material = 0;
        while (interval_counter < list.len && material == 0 && dda_step_counter < MAX_DDA_STEPS) {

            float t_start = list.intervals[interval_counter].t_min + EPSILON;
            vec3 start_pos = get_ray_pos(ray, t_start);
            AABB aabb = list.aabbs[interval_counter];
            DDA dda = init_DDA(ray, start_pos, aabb.min, aabb.max, 1.0);

            while (dda_step_counter < MAX_DDA_STEPS) {
                material = cgs_tree_at_pos(dda.cell);

                if (material != 0) {
                    if (RENDER_DISTANCE) {
                        float current_t = get_DDA_t(dda) + t_start;
                        color = vec4(get_debug_color_gradient_from_float(current_t / MAX_DEPTH), 1.0);
                    } else {
                        color = COLOR_BUFFER[material];
                    }

                    break;
                }

                dda = step_DDA(dda);

                if (dda.out_of_bounds) {
                    break;
                }

                dda_step_counter += 1;
            }

            if (RENDER_DDA_STEPS) {
                color = vec4(get_debug_color_gradient_from_float(float(dda_step_counter) / MAX_DDA_STEPS), 1.0);
            }

            interval_counter += 1;
        }

        imageStore(img, ivec2(gl_GlobalInvocationID.xy), color);
        return;
    }

    if (USE_AABB_BASED_SCALE) {
        uint dda_step_counter = 0;
        uint material = 0;

        float interval_t = 0;
        Interval interval;
        AABB aabb;
        float scale = 1.0;
        while (material == 0 && cgs_tree_next_interval(ray, interval_t, interval, aabb) && dda_step_counter < MAX_DDA_STEPS) {

            float t_start = max(interval.t_min, 0) + EPSILON;
            vec3 start_pos = get_ray_pos(ray, t_start);

            if (interval.t_min < 0) {
                scale = 1;
            } else {
                vec3 aabb_closest_point = min(abs(ray.pos - aabb.min), abs(ray.pos - aabb.max));
                float dist_to_aabb = length(aabb_closest_point);
                scale = clamp(exp2(floor(dist_to_aabb / 50.0)), 1, 16);
            }

            DDA dda = init_DDA(ray, start_pos, aabb.min, aabb.max, scale);

            while (dda_step_counter < MAX_DDA_STEPS) {
                material = cgs_tree_at_pos(dda.cell);

                if (material != 0) {
                    if (RENDER_DISTANCE) {
                        float current_t = get_DDA_t(dda) + t_start;
                        color = vec4(get_debug_color_gradient_from_float(current_t / MAX_DEPTH), 1.0);
                    } else {
                        color = COLOR_BUFFER[material];
                    }

                    break;
                }

                dda = step_DDA(dda);

                if (dda.out_of_bounds) {
                    break;
                }

                dda_step_counter += 1;
            }

            if (RENDER_DDA_STEPS) {
                color = vec4(get_debug_color_gradient_from_float(float(dda_step_counter) / MAX_DDA_STEPS), 1.0);
            }

            interval_t = interval.t_max + EPSILON;
        }

        imageStore(img, ivec2(gl_GlobalInvocationID.xy), color);
        return;
    }

    if (USE_DDA_INCREASE) {
        uint dda_step_counter = 0;
        uint material = 0;

        float interval_t = 0;
        Interval interval;
        AABB aabb;
        float scale = 1.0;
        while (material == 0 && cgs_tree_next_interval(ray, interval_t, interval, aabb) && dda_step_counter < MAX_DDA_STEPS) {

            float t_start = max(interval.t_min, 0) + EPSILON;
            vec3 start_pos = get_ray_pos(ray, t_start);

            DDA_INC dda = init_DDA_INC(ray, start_pos, aabb.min, aabb.max, scale);

            while (dda_step_counter < MAX_DDA_STEPS) {
                material = cgs_tree_at_pos(dda.cell);

                if (material != 0) {
                    if (RENDER_DISTANCE) {
                        float current_t = get_DDA_INC_t(dda) + t_start;
                        color = vec4(get_debug_color_gradient_from_float(current_t / MAX_DEPTH), 1.0);
                    } else {
                        color = COLOR_BUFFER[material];
                    }

                    break;
                }

                dda = step_DDA(dda);

                if (dda.out_of_bounds) {
                    break;
                }

                dda_step_counter += 1;
            }

            if (RENDER_DDA_STEPS) {
                color = vec4(get_debug_color_gradient_from_float(float(dda_step_counter) / MAX_DDA_STEPS), 1.0);
            }

            interval_t = interval.t_max + EPSILON;
        }

        imageStore(img, ivec2(gl_GlobalInvocationID.xy), color);
        return;
    }
}



